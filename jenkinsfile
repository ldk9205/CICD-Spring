pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-token'
        DOCKER_IMAGE = 'sb8citizen/wartoimg'
        GIT_CREDENTIALS_ID = 'github-token'
        YAML_REPO_URL = 'github.com/ldk9205/yaml.git'
        YAML_REPO_BRANCH = 'main'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ldk9205/CICD-Spring.git'
            }
        }
        
        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./mvnw'
            }
        }

        stage('Build WAR') {
            steps {
                sh './mvnw clean package'
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def dockerfile = '''
                    FROM tomcat:10.1-jdk17
                    COPY target/*.war /usr/local/tomcat/webapps/test.war
                    RUN sed -i '/<\\/Host>/ i\\    <Context path="" docBase="test" reloadable="false" />' /usr/local/tomcat/conf/server.xml
                    '''
                    writeFile file: 'Dockerfile', text: dockerfile
                    sh 'docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                        sh 'docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}'
                    }
                }
            }
        }

        stage('Generate K8s YAML') {
            steps {
                script {
                    def deploymentYaml = """
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: test-deployment
                      labels:
                        app: test
                    spec:
                      replicas: 3
                      selector:
                        matchLabels:
                          app: test
                      template:
                        metadata:
                          labels:
                            app: test
                        spec:
                          containers:
                          - name: test-container
                            image: ${DOCKER_IMAGE}:${BUILD_NUMBER}
                            ports:
                            - containerPort: 8080
                    """

                    def serviceYaml = """
                    apiVersion: v1
                    kind: Service
                    metadata:
                      name: test-service
                    spec:
                      type: NodePort
                      selector:
                        app: test
                      ports:
                      - protocol: TCP
                        port: 80
                        targetPort: 8080
                        nodePort: 30007
                    """

                    writeFile file: 'deployment.yaml', text: deploymentYaml
                    writeFile file: 'service.yaml', text: serviceYaml

                    withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh '''
                        if [ ! -d "yaml-repo" ]; then
                        git clone https://${YAML_REPO_URL} yaml-repo
                        fi

                        git config --global --add safe.directory /var/lib/jenkins/workspace/test2/yaml-repo
                        cd yaml-repo

                        git config user.name "${GIT_USERNAME}"
                        git config user.email "${GIT_USERNAME}@example.com"

                        if git show-ref --quiet refs/heads/main; then
                        git checkout main
                        else
                        git checkout -b main
                        fi

                        cp ../deployment.yaml ./
                        cp ../service.yaml ./
                        git add .
                        git commit -m 'Add deployment and service yaml files for build ${env.BUILD_NUMBER}'

                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${YAML_REPO_URL} main
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
